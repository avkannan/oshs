/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.um.qa.oshs.sb.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.um.qa.oshs.sb.model.customer;
import com.um.qa.oshs.sb.model.customerModel;
import com.um.qa.oshs.sb.model.customerSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the customer service. Represents a row in the &quot;oshs_customer&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>customerModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link customerImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see customerImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class customerModelImpl
	extends BaseModelImpl<customer> implements customerModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a customer model instance should use the <code>customer</code> interface instead.
	 */
	public static final String TABLE_NAME = "oshs_customer";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"customerID", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"firstName", Types.VARCHAR}, {"middleName", Types.VARCHAR},
		{"lastName", Types.VARCHAR}, {"displayName", Types.VARCHAR},
		{"salutation", Types.VARCHAR}, {"address1", Types.VARCHAR},
		{"address2", Types.VARCHAR}, {"address3", Types.BIGINT},
		{"city", Types.BIGINT}, {"country", Types.BIGINT},
		{"state_", Types.BIGINT}, {"zip", Types.BIGINT}, {"phone", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("customerID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("firstName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("middleName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("lastName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("displayName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("salutation", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address1", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address3", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("city", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("country", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("state_", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("zip", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("phone", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table oshs_customer (uuid_ VARCHAR(75) null,customerID LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,firstName VARCHAR(75) null,middleName VARCHAR(75) null,lastName VARCHAR(75) null,displayName VARCHAR(75) null,salutation VARCHAR(75) null,address1 VARCHAR(75) null,address2 VARCHAR(75) null,address3 LONG,city LONG,country LONG,state_ LONG,zip LONG,phone LONG)";

	public static final String TABLE_SQL_DROP = "drop table oshs_customer";

	public static final String ORDER_BY_JPQL =
		" ORDER BY customer.displayName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY oshs_customer.displayName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long DISPLAYNAME_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static customer toModel(customerSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		customer model = new customerImpl();

		model.setUuid(soapModel.getUuid());
		model.setCustomerID(soapModel.getCustomerID());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setFirstName(soapModel.getFirstName());
		model.setMiddleName(soapModel.getMiddleName());
		model.setLastName(soapModel.getLastName());
		model.setDisplayName(soapModel.getDisplayName());
		model.setSalutation(soapModel.getSalutation());
		model.setAddress1(soapModel.getAddress1());
		model.setAddress2(soapModel.getAddress2());
		model.setAddress3(soapModel.getAddress3());
		model.setCity(soapModel.getCity());
		model.setCountry(soapModel.getCountry());
		model.setState(soapModel.getState());
		model.setZip(soapModel.getZip());
		model.setPhone(soapModel.getPhone());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<customer> toModels(customerSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<customer> models = new ArrayList<customer>(soapModels.length);

		for (customerSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public customerModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _customerID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCustomerID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _customerID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return customer.class;
	}

	@Override
	public String getModelClassName() {
		return customer.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<customer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<customer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<customer, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((customer)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<customer, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<customer, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(customer)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<customer, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<customer, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<customer, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<customer, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<customer, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<customer, Object>>();
		Map<String, BiConsumer<customer, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<customer, ?>>();

		attributeGetterFunctions.put("uuid", customer::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<customer, String>)customer::setUuid);
		attributeGetterFunctions.put("customerID", customer::getCustomerID);
		attributeSetterBiConsumers.put(
			"customerID", (BiConsumer<customer, Long>)customer::setCustomerID);
		attributeGetterFunctions.put("groupId", customer::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<customer, Long>)customer::setGroupId);
		attributeGetterFunctions.put("companyId", customer::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<customer, Long>)customer::setCompanyId);
		attributeGetterFunctions.put("userId", customer::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<customer, Long>)customer::setUserId);
		attributeGetterFunctions.put("userName", customer::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<customer, String>)customer::setUserName);
		attributeGetterFunctions.put("createDate", customer::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<customer, Date>)customer::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", customer::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<customer, Date>)customer::setModifiedDate);
		attributeGetterFunctions.put("firstName", customer::getFirstName);
		attributeSetterBiConsumers.put(
			"firstName", (BiConsumer<customer, String>)customer::setFirstName);
		attributeGetterFunctions.put("middleName", customer::getMiddleName);
		attributeSetterBiConsumers.put(
			"middleName",
			(BiConsumer<customer, String>)customer::setMiddleName);
		attributeGetterFunctions.put("lastName", customer::getLastName);
		attributeSetterBiConsumers.put(
			"lastName", (BiConsumer<customer, String>)customer::setLastName);
		attributeGetterFunctions.put("displayName", customer::getDisplayName);
		attributeSetterBiConsumers.put(
			"displayName",
			(BiConsumer<customer, String>)customer::setDisplayName);
		attributeGetterFunctions.put("salutation", customer::getSalutation);
		attributeSetterBiConsumers.put(
			"salutation",
			(BiConsumer<customer, String>)customer::setSalutation);
		attributeGetterFunctions.put("address1", customer::getAddress1);
		attributeSetterBiConsumers.put(
			"address1", (BiConsumer<customer, String>)customer::setAddress1);
		attributeGetterFunctions.put("address2", customer::getAddress2);
		attributeSetterBiConsumers.put(
			"address2", (BiConsumer<customer, String>)customer::setAddress2);
		attributeGetterFunctions.put("address3", customer::getAddress3);
		attributeSetterBiConsumers.put(
			"address3", (BiConsumer<customer, Long>)customer::setAddress3);
		attributeGetterFunctions.put("city", customer::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<customer, Long>)customer::setCity);
		attributeGetterFunctions.put("country", customer::getCountry);
		attributeSetterBiConsumers.put(
			"country", (BiConsumer<customer, Long>)customer::setCountry);
		attributeGetterFunctions.put("state", customer::getState);
		attributeSetterBiConsumers.put(
			"state", (BiConsumer<customer, Long>)customer::setState);
		attributeGetterFunctions.put("zip", customer::getZip);
		attributeSetterBiConsumers.put(
			"zip", (BiConsumer<customer, Long>)customer::setZip);
		attributeGetterFunctions.put("phone", customer::getPhone);
		attributeSetterBiConsumers.put(
			"phone", (BiConsumer<customer, Long>)customer::setPhone);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCustomerID() {
		return _customerID;
	}

	@Override
	public void setCustomerID(long customerID) {
		_customerID = customerID;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public String getFirstName() {
		if (_firstName == null) {
			return "";
		}
		else {
			return _firstName;
		}
	}

	@Override
	public void setFirstName(String firstName) {
		_firstName = firstName;
	}

	@JSON
	@Override
	public String getMiddleName() {
		if (_middleName == null) {
			return "";
		}
		else {
			return _middleName;
		}
	}

	@Override
	public void setMiddleName(String middleName) {
		_middleName = middleName;
	}

	@JSON
	@Override
	public String getLastName() {
		if (_lastName == null) {
			return "";
		}
		else {
			return _lastName;
		}
	}

	@Override
	public void setLastName(String lastName) {
		_lastName = lastName;
	}

	@JSON
	@Override
	public String getDisplayName() {
		if (_displayName == null) {
			return "";
		}
		else {
			return _displayName;
		}
	}

	@Override
	public void setDisplayName(String displayName) {
		_columnBitmask = -1L;

		_displayName = displayName;
	}

	@JSON
	@Override
	public String getSalutation() {
		if (_salutation == null) {
			return "";
		}
		else {
			return _salutation;
		}
	}

	@Override
	public void setSalutation(String salutation) {
		_salutation = salutation;
	}

	@JSON
	@Override
	public String getAddress1() {
		if (_address1 == null) {
			return "";
		}
		else {
			return _address1;
		}
	}

	@Override
	public void setAddress1(String address1) {
		_address1 = address1;
	}

	@JSON
	@Override
	public String getAddress2() {
		if (_address2 == null) {
			return "";
		}
		else {
			return _address2;
		}
	}

	@Override
	public void setAddress2(String address2) {
		_address2 = address2;
	}

	@JSON
	@Override
	public long getAddress3() {
		return _address3;
	}

	@Override
	public void setAddress3(long address3) {
		_address3 = address3;
	}

	@JSON
	@Override
	public long getCity() {
		return _city;
	}

	@Override
	public void setCity(long city) {
		_city = city;
	}

	@JSON
	@Override
	public long getCountry() {
		return _country;
	}

	@Override
	public void setCountry(long country) {
		_country = country;
	}

	@JSON
	@Override
	public long getState() {
		return _state;
	}

	@Override
	public void setState(long state) {
		_state = state;
	}

	@JSON
	@Override
	public long getZip() {
		return _zip;
	}

	@Override
	public void setZip(long zip) {
		_zip = zip;
	}

	@JSON
	@Override
	public long getPhone() {
		return _phone;
	}

	@Override
	public void setPhone(long phone) {
		_phone = phone;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(customer.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), customer.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public customer toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (customer)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		customerImpl customerImpl = new customerImpl();

		customerImpl.setUuid(getUuid());
		customerImpl.setCustomerID(getCustomerID());
		customerImpl.setGroupId(getGroupId());
		customerImpl.setCompanyId(getCompanyId());
		customerImpl.setUserId(getUserId());
		customerImpl.setUserName(getUserName());
		customerImpl.setCreateDate(getCreateDate());
		customerImpl.setModifiedDate(getModifiedDate());
		customerImpl.setFirstName(getFirstName());
		customerImpl.setMiddleName(getMiddleName());
		customerImpl.setLastName(getLastName());
		customerImpl.setDisplayName(getDisplayName());
		customerImpl.setSalutation(getSalutation());
		customerImpl.setAddress1(getAddress1());
		customerImpl.setAddress2(getAddress2());
		customerImpl.setAddress3(getAddress3());
		customerImpl.setCity(getCity());
		customerImpl.setCountry(getCountry());
		customerImpl.setState(getState());
		customerImpl.setZip(getZip());
		customerImpl.setPhone(getPhone());

		customerImpl.resetOriginalValues();

		return customerImpl;
	}

	@Override
	public int compareTo(customer customer) {
		int value = 0;

		value = getDisplayName().compareTo(customer.getDisplayName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof customer)) {
			return false;
		}

		customer customer = (customer)obj;

		long primaryKey = customer.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		customerModelImpl customerModelImpl = this;

		customerModelImpl._originalUuid = customerModelImpl._uuid;

		customerModelImpl._originalGroupId = customerModelImpl._groupId;

		customerModelImpl._setOriginalGroupId = false;

		customerModelImpl._originalCompanyId = customerModelImpl._companyId;

		customerModelImpl._setOriginalCompanyId = false;

		customerModelImpl._setModifiedDate = false;

		customerModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<customer> toCacheModel() {
		customerCacheModel customerCacheModel = new customerCacheModel();

		customerCacheModel.uuid = getUuid();

		String uuid = customerCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			customerCacheModel.uuid = null;
		}

		customerCacheModel.customerID = getCustomerID();

		customerCacheModel.groupId = getGroupId();

		customerCacheModel.companyId = getCompanyId();

		customerCacheModel.userId = getUserId();

		customerCacheModel.userName = getUserName();

		String userName = customerCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			customerCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			customerCacheModel.createDate = createDate.getTime();
		}
		else {
			customerCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			customerCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			customerCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		customerCacheModel.firstName = getFirstName();

		String firstName = customerCacheModel.firstName;

		if ((firstName != null) && (firstName.length() == 0)) {
			customerCacheModel.firstName = null;
		}

		customerCacheModel.middleName = getMiddleName();

		String middleName = customerCacheModel.middleName;

		if ((middleName != null) && (middleName.length() == 0)) {
			customerCacheModel.middleName = null;
		}

		customerCacheModel.lastName = getLastName();

		String lastName = customerCacheModel.lastName;

		if ((lastName != null) && (lastName.length() == 0)) {
			customerCacheModel.lastName = null;
		}

		customerCacheModel.displayName = getDisplayName();

		String displayName = customerCacheModel.displayName;

		if ((displayName != null) && (displayName.length() == 0)) {
			customerCacheModel.displayName = null;
		}

		customerCacheModel.salutation = getSalutation();

		String salutation = customerCacheModel.salutation;

		if ((salutation != null) && (salutation.length() == 0)) {
			customerCacheModel.salutation = null;
		}

		customerCacheModel.address1 = getAddress1();

		String address1 = customerCacheModel.address1;

		if ((address1 != null) && (address1.length() == 0)) {
			customerCacheModel.address1 = null;
		}

		customerCacheModel.address2 = getAddress2();

		String address2 = customerCacheModel.address2;

		if ((address2 != null) && (address2.length() == 0)) {
			customerCacheModel.address2 = null;
		}

		customerCacheModel.address3 = getAddress3();

		customerCacheModel.city = getCity();

		customerCacheModel.country = getCountry();

		customerCacheModel.state = getState();

		customerCacheModel.zip = getZip();

		customerCacheModel.phone = getPhone();

		return customerCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<customer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<customer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<customer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((customer)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<customer, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<customer, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<customer, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((customer)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader =
		customer.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		customer.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _customerID;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private String _firstName;
	private String _middleName;
	private String _lastName;
	private String _displayName;
	private String _salutation;
	private String _address1;
	private String _address2;
	private long _address3;
	private long _city;
	private long _country;
	private long _state;
	private long _zip;
	private long _phone;
	private long _columnBitmask;
	private customer _escapedModel;

}