/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.um.qa.oshs.sb.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import com.um.qa.oshs.sb.model.cart;
import com.um.qa.oshs.sb.model.cartModel;
import com.um.qa.oshs.sb.model.cartSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

import org.osgi.annotation.versioning.ProviderType;

/**
 * The base model implementation for the cart service. Represents a row in the &quot;oshs_cart&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>cartModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link cartImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see cartImpl
 * @generated
 */
@JSON(strict = true)
@ProviderType
public class cartModelImpl extends BaseModelImpl<cart> implements cartModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cart model instance should use the <code>cart</code> interface instead.
	 */
	public static final String TABLE_NAME = "oshs_cart";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"cartID", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"cartItemsCount", Types.BIGINT}, {"productID", Types.BIGINT},
		{"quantity", Types.BIGINT}, {"total", Types.FLOAT},
		{"customerID", Types.BIGINT}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("cartID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("cartItemsCount", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("productID", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("quantity", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("total", Types.FLOAT);
		TABLE_COLUMNS_MAP.put("customerID", Types.BIGINT);
	}

	public static final String TABLE_SQL_CREATE =
		"create table oshs_cart (uuid_ VARCHAR(75) null,cartID LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,cartItemsCount LONG,productID LONG,quantity LONG,total DOUBLE,customerID LONG)";

	public static final String TABLE_SQL_DROP = "drop table oshs_cart";

	public static final String ORDER_BY_JPQL = " ORDER BY cart.cartID ASC";

	public static final String ORDER_BY_SQL = " ORDER BY oshs_cart.cartID ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long UUID_COLUMN_BITMASK = 4L;

	public static final long CARTID_COLUMN_BITMASK = 8L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static cart toModel(cartSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		cart model = new cartImpl();

		model.setUuid(soapModel.getUuid());
		model.setCartID(soapModel.getCartID());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setCartItemsCount(soapModel.getCartItemsCount());
		model.setProductID(soapModel.getProductID());
		model.setQuantity(soapModel.getQuantity());
		model.setTotal(soapModel.getTotal());
		model.setCustomerID(soapModel.getCustomerID());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<cart> toModels(cartSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<cart> models = new ArrayList<cart>(soapModels.length);

		for (cartSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public cartModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cartID;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCartID(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cartID;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return cart.class;
	}

	@Override
	public String getModelClassName() {
		return cart.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<cart, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<cart, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<cart, Object> attributeGetterFunction = entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((cart)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<cart, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<cart, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept((cart)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<cart, Object>> getAttributeGetterFunctions() {
		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<cart, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static final Map<String, Function<cart, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<cart, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<cart, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<cart, Object>>();
		Map<String, BiConsumer<cart, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<cart, ?>>();

		attributeGetterFunctions.put("uuid", cart::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<cart, String>)cart::setUuid);
		attributeGetterFunctions.put("cartID", cart::getCartID);
		attributeSetterBiConsumers.put(
			"cartID", (BiConsumer<cart, Long>)cart::setCartID);
		attributeGetterFunctions.put("groupId", cart::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<cart, Long>)cart::setGroupId);
		attributeGetterFunctions.put("companyId", cart::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId", (BiConsumer<cart, Long>)cart::setCompanyId);
		attributeGetterFunctions.put("userId", cart::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<cart, Long>)cart::setUserId);
		attributeGetterFunctions.put("userName", cart::getUserName);
		attributeSetterBiConsumers.put(
			"userName", (BiConsumer<cart, String>)cart::setUserName);
		attributeGetterFunctions.put("createDate", cart::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate", (BiConsumer<cart, Date>)cart::setCreateDate);
		attributeGetterFunctions.put("modifiedDate", cart::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate", (BiConsumer<cart, Date>)cart::setModifiedDate);
		attributeGetterFunctions.put("cartItemsCount", cart::getCartItemsCount);
		attributeSetterBiConsumers.put(
			"cartItemsCount", (BiConsumer<cart, Long>)cart::setCartItemsCount);
		attributeGetterFunctions.put("productID", cart::getProductID);
		attributeSetterBiConsumers.put(
			"productID", (BiConsumer<cart, Long>)cart::setProductID);
		attributeGetterFunctions.put("quantity", cart::getQuantity);
		attributeSetterBiConsumers.put(
			"quantity", (BiConsumer<cart, Long>)cart::setQuantity);
		attributeGetterFunctions.put("total", cart::getTotal);
		attributeSetterBiConsumers.put(
			"total", (BiConsumer<cart, Float>)cart::setTotal);
		attributeGetterFunctions.put("customerID", cart::getCustomerID);
		attributeSetterBiConsumers.put(
			"customerID", (BiConsumer<cart, Long>)cart::setCustomerID);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getCartID() {
		return _cartID;
	}

	@Override
	public void setCartID(long cartID) {
		_cartID = cartID;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException pe) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getCartItemsCount() {
		return _cartItemsCount;
	}

	@Override
	public void setCartItemsCount(long cartItemsCount) {
		_cartItemsCount = cartItemsCount;
	}

	@JSON
	@Override
	public long getProductID() {
		return _productID;
	}

	@Override
	public void setProductID(long productID) {
		_productID = productID;
	}

	@JSON
	@Override
	public long getQuantity() {
		return _quantity;
	}

	@Override
	public void setQuantity(long quantity) {
		_quantity = quantity;
	}

	@JSON
	@Override
	public float getTotal() {
		return _total;
	}

	@Override
	public void setTotal(float total) {
		_total = total;
	}

	@JSON
	@Override
	public long getCustomerID() {
		return _customerID;
	}

	@Override
	public void setCustomerID(long customerID) {
		_customerID = customerID;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(cart.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), cart.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public cart toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (cart)ProxyUtil.newProxyInstance(
				_classLoader, _escapedModelInterfaces,
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		cartImpl cartImpl = new cartImpl();

		cartImpl.setUuid(getUuid());
		cartImpl.setCartID(getCartID());
		cartImpl.setGroupId(getGroupId());
		cartImpl.setCompanyId(getCompanyId());
		cartImpl.setUserId(getUserId());
		cartImpl.setUserName(getUserName());
		cartImpl.setCreateDate(getCreateDate());
		cartImpl.setModifiedDate(getModifiedDate());
		cartImpl.setCartItemsCount(getCartItemsCount());
		cartImpl.setProductID(getProductID());
		cartImpl.setQuantity(getQuantity());
		cartImpl.setTotal(getTotal());
		cartImpl.setCustomerID(getCustomerID());

		cartImpl.resetOriginalValues();

		return cartImpl;
	}

	@Override
	public int compareTo(cart cart) {
		long primaryKey = cart.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof cart)) {
			return false;
		}

		cart cart = (cart)obj;

		long primaryKey = cart.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		cartModelImpl cartModelImpl = this;

		cartModelImpl._originalUuid = cartModelImpl._uuid;

		cartModelImpl._originalGroupId = cartModelImpl._groupId;

		cartModelImpl._setOriginalGroupId = false;

		cartModelImpl._originalCompanyId = cartModelImpl._companyId;

		cartModelImpl._setOriginalCompanyId = false;

		cartModelImpl._setModifiedDate = false;

		cartModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<cart> toCacheModel() {
		cartCacheModel cartCacheModel = new cartCacheModel();

		cartCacheModel.uuid = getUuid();

		String uuid = cartCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			cartCacheModel.uuid = null;
		}

		cartCacheModel.cartID = getCartID();

		cartCacheModel.groupId = getGroupId();

		cartCacheModel.companyId = getCompanyId();

		cartCacheModel.userId = getUserId();

		cartCacheModel.userName = getUserName();

		String userName = cartCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			cartCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			cartCacheModel.createDate = createDate.getTime();
		}
		else {
			cartCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			cartCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			cartCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		cartCacheModel.cartItemsCount = getCartItemsCount();

		cartCacheModel.productID = getProductID();

		cartCacheModel.quantity = getQuantity();

		cartCacheModel.total = getTotal();

		cartCacheModel.customerID = getCustomerID();

		return cartCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<cart, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<cart, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<cart, Object> attributeGetterFunction = entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((cart)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<cart, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<cart, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<cart, Object> attributeGetterFunction = entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((cart)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static final ClassLoader _classLoader = cart.class.getClassLoader();
	private static final Class<?>[] _escapedModelInterfaces = new Class[] {
		cart.class, ModelWrapper.class
	};
	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _cartID;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private long _cartItemsCount;
	private long _productID;
	private long _quantity;
	private float _total;
	private long _customerID;
	private long _columnBitmask;
	private cart _escapedModel;

}